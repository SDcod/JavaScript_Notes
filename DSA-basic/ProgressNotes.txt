
Key Points : 
	- swapping
	- working with loops (for, while), blocks (if, else if) 
	- two pointer techniques.
	- sliding window techniques.
	- HashMap (aka objects).
	- Set
	- Sorting function
	- Sorting techniques - Bubble,Selection,Insertion,Quick,Merge
	- Stack
	- LinkedList- implementation 
	- Queue
	- Heap(priority queue)** implementation pending
	- Recursion - function calling itself.
	- Dynamic Programming - breaking problems into overlapping subproblems.(uses memoization - hashtables/arrays)
	- OOPS**
	- HashTables**





Array Questions
-Find the Maximum and Minimum Element in an array. ->use Math.min and Math.max ; using a for loop ; using a array.reduce

-Reverse an Array without using built-in functions. ->iterating half array using For/while loop and swapping ; arr.reverse

-Rotate an Array by k positions (both left and right rotations).-> using while loop and reversing, 

-Find the Second Largest Element in an array. -> using for loop and if (but if unsorted need to change logic if(num>maxnum){secondL=maxnum;maxnum=num})

-Move All Zeros to the End of an array while maintaining the order of other elements.->use two pointer swap technique.

-Remove Duplicates from a sorted array.-> using two pointer and one to keep track of unique index. (first increment the unique index then swap)

-Remove Duplicates from unsorted array.-> using a 'Set' OR HashMap OR by sorting then filtering?? 

-Find the Union and Intersection of two arrays.-> using HashMaps also make sure to handle duplicates using a counter.

-Check if an Array is Sorted in ascending order.-> comparing with two contiguous elements

-Find the Missing Number in an array of numbers from 1 to n.->using set.has(num) or hashmap 
			OR if only one number is missing the we can use summation formula n*(n+1)/2

-Find the Intersection of Two Arrays. -> using hashmap and counter as the value

-Separate Even and Odd Numbers in an array. -> using two pointer for inplace OR two for loops with new arr; 

-Find the Largest Three Elements in an array.-> using set and sort OR by three variables and else if blocks;

-Find the Sum of All Pairs Equal to a Given Sum in an array.-> using hashmap similar to the two sum with some logic updates;

-Find the Subarray with the Maximum Sum (Kadane’s Algorithm).->calculate the maxEnding based on sum till the current element. return the maximum sum using another max variable.

-Sort an Array of 0s, 1s, and 2s without using sorting functions. -> using three pointers and while loop

-Merge Two Sorted Arrays without using extra space.-> comparing the element of arr1 with arr2[0], swapping , then resorting arr2 with insertion sort so we do inplace sorting.

-Find the Majority Element in an array (appears more than n/2 times). - > using a hashmap or Booyer-Moore Algo

-Find the Elements that Appear More than n/3 Times in an array. - > **using hashmap it's easy to implement or Booyer-Moore Algo modified for n/3 elements as there will only be 2 of them

[Advance]
-Count Inversions in an Array.
-Find the Kth Largest Element in an array. -> using max-heap and min-heap ** learn and implement a heap first

String Questions
JS string methods (common)
// length;
// charAt;
// charCodeAt;
// includes;
// slice;
// substring;
// replace;
// replaceAll;
// repeat
// split
// trim


-Check if a String is a Palindrome.-> by reversing OR traversing till mid and comparing opposite index.

-Reverse a String without using built-in functions. -> array methods OR reading string backwards.

-Find the First Non-Repeating Character in a string. -> using a map to store frequency and returning the first having frequency one.

-Check if Two Strings are Anagrams of each other. ->iterate over s1 , check freqency of each char, compare to s2.

-Count the Number of Vowels and Consonants in a string. ->by using includes method or a regex.

-Remove Duplicate Characters in a string. ->using Map to track seen elements or a Set.

-Implement a Basic String Compression (e.g., "aaabbc" becomes "a3b2c1"). ->using two dynamic comparison in for loop.

-Count the Frequency of Characters in a string. ->using hashmap;

-Check if a String Contains Only Digits.-> using regex or isNaN

-Find the Longest Common Prefix in an array of strings. ->sorting and comparing first and last string char by char.

-Check if One String is a Rotation of Another (e.g., "waterbottle" and "erbottlewat").->s1+s1 includes substring s2;

-Reverse Each Word in a Sentence.-> using map and reverse.

-Find All Substrings of a String.-> by using nested loops and substring method.

-Find the Longest Palindromic Substring.-> finding a palindrome first then comparing with max length str.

-Check if a String is a Valid Shuffle of two other strings.(Anagrams) -> frequency map

-Find the Longest Repeating Character Sequence in a string.
-Replace Spaces with "%20" in a given string (like URL encoding).
-Determine if a String Has All Unique Characters.
-Convert a String to an Integer without using parseInt.

-Linked List Questions (if you’re ready to work with linked lists in JavaScript)
-Implement a Singly Linked List.
-Reverse a Linked List.
-Find the Middle Element of a linked list.
-Check if a Linked List has a Cycle.
-Detect the Start of a Cycle in a linked list.
-Merge Two Sorted Linked Lists.
-Remove Duplicates from an Unsorted Linked List.
-Find the Kth Element from the End of a linked list.
-Check if a Linked List is a Palindrome.
-Split a Linked List into Two Halves.

Miscellaneous Questions
-Implement a Stack using an array.
-Implement a Queue using an array.
-Implement Binary Search for a sorted array.
-Sort an Array using Bubble Sort. -> comparing adjacent elements then swapping it
-Sort an Array using Selection Sort. -> comparig the elements from unsorted subarr to the current minimum key and swapping it.
-Implement Insertion Sort.-> comparing the current element with all previous and swapping with correct position.
-Quick sort -> divide using pivot apply recursion on left , right sub array
-Merge Sort -> divide 
-Calculate the Factorial of a number using recursion.
-Generate Fibonacci Sequence up to n using recursion.
-Check if a Number is Prime.
-Find All Prime Numbers up to n (Sieve of Eratosthenes).
-Calculate the Power of a Number without using the built-in ** operator.
-Find the Greatest Common Divisor (GCD) of two numbers.
-Find the Least Common Multiple (LCM) of two numbers.
-Implement Binary Search on a sorted array.
-Count the Number of Set Bits in a binary representation of a number.
-Find All Subsets of an Array (Power Set).
-Generate All Permutations of a String.
-Implement Depth-First Search (DFS) on a graph.
-Implement Breadth-First Search (BFS) on a graph.
-Solve the Tower of Hanoi Problem using recursion.

HELPFUL
-------- List of topics for basic DSA and handy notes ----------------
Big O	    Description	          Example
O(1)	    Constant time        	Accessing an array element.
O(log n)	Logarithmic time	    Binary search.
O(n)	    Linear time	          Loop through an array.
O(n²)	    Quadratic time	      Nested loops.
O(2ⁿ)	    Exponential time	    Recursive Fibonacci (inefficient).

-log n
The term log n (logarithm of n) describes how the input size n shrinks or grows exponentially during the execution of an algorithm.
In the context of algorithms, we typically use base-2 logarithm (log₂ n) because it represents repeatedly dividing the input by 2.
-trick to calculate logs say, n=16 -> log2 16 
                            log2 16 = x
                             16 = 2^x
                             16 = 2^4
                             hence, log 16 = 4

DSA Topics to focus:
built-in : Arrays[1d,2d,3d,multidimensional],Objects,Sets,Maps
custom : LinkedList,Hashtables,Stacks,Queues,Trees,Graphs
Time/Space complexity basics
OOPS - Object,Classes,Encapsulation,Abstraction,Inheritance,Polymorphism
Sorting and Searching
String manipulation
solve easy problems daily (Arrays and strings)

Automation focuses:
Test frameworks/libraries : Moch, Jest, Chai

Cypress - 
 core concepts revision
 file reading/asserting/iframes/dragdrop
 custom configs/utility functions
Design Patterns (POM, Facory Builder)

API testing - Postman, Cypress API 
REST principles, GraphQL
JSON parsing
Authentication - Oauth,BasicAuth,API key,JWT token
HTTP methods and status codes
Mocking - postman mocking server, Wiremock
Test reporting (MochaAwesome)

Process focused topics:
CICD (Jenkins/github actions) 
Git commands (Git helpful: https://uidaholib.github.io/get-git/3workflow.html)
Docker fundamentals
Cross Browser testing

System Design
 Test architecture
 Framework selection Criteria
 Configuration management
 Design one e2e Framework

Mock Interviews
 coding, system design, test scenarios,1 mock daily

STAR method practice
project explainations
common behaioral Questions
framework optimization


Data Structures - 
1. Arrays
Sorting:
	QuickSort: Efficient average-case time complexity (O(nlog n))
	MergeSort: Stable sort, useful when order matters (O(nlog n))
Searching:
	Binary Search: Fast search in sorted arrays (O(log n))
Two Pointers:
	In-place manipulation, often for sorted arrays (e.g., removing duplicates)
Sliding Window:
	Subarray problems, finding maximum/minimum within a window

2. Linked Lists
Traversal:
	Iterate through the list, understand the node structure
Insertion/Deletion:
	At beginning, end, or at a specific position
Reversal:
	In-place reversal, recursive and iterative approaches
Cycle Detection:
	Floyd's Tortoise and Hare algorithm

3. Hash Tables (Hash Maps/Sets)
Implementation not needed. Just understand following:
	Understand how hash functions work
	Insertion/Deletion/Lookup
	Collision Handling

4. Trees (Binary Trees, Binary Search Trees, etc.)
Traversal:
	Inorder, Preorder, Postorder (recursive and iterative)
Searching:
	Find a node with a given value (especially in BSTs)

5. Stacks
Implementation not needed. Just understand following:
	Push/Pop/Peek Operations

6. Queues
Implementation not needed. Just understand following:
	Enqueue/Dequeue Operations

7. Heaps (Priority Queues)
Implementation not needed. Just understand following:
	Insertion/Deletion (extract-min/max)
	Building a Heap
Top K Elements:
	Using a heap to find k largest/smallest elements

8. Graphs
Traversal:
	Breadth-First Search (BFS)
	Depth-First Search (DFS)
Shortest Path:
	Dijkstra's Algorithm
Cycle Detection:
	DFS

Algorithms-
1. Recursion
	Defining a problem in terms of itself, often leading to elegant and concise solutions.
	Solve: Factorial calculation, tree traversals, depth-first search.

2. Dynamic Programming
	Breaking down a problem into overlapping subproblems and storing solutions to avoid recomputation.
	Solve: Fibonacci sequence, Knapsack problem, Longest Common Subsequence.
	
CICD - 
git pull - pull any updates from the remote.
git checkout branch_name - switch to a branch where you want to make changes
git init - initialize new repo
git add . - stage all the changes
git commit -m "commit message" - commit the changes

GithubActions -
	Workflows
		triggers
			jobs
				steps/actions
	
	Artifacts
	Secrets
	
