
Key Points : 
	- swapping
	- working with loops (for, while), blocks (if, else if) 
	- two pointer techniques.
	- sliding window techniques.
	- HashMap (aka objects).
	- Set
	- Sorting function
	- Recursion**






Array Questions
-Find the Maximum and Minimum Element in an array. ->use Math.min and Math.max ; using a for loop ; using a array.reduce

-Reverse an Array without using built-in functions. ->iterating half array using For/while loop and swapping ; arr.reverse

-Rotate an Array by k positions (both left and right rotations).-> using while loop and reversing, 

-Find the Second Largest Element in an array. -> using for loop and if (but if unsorted need to change logic if(num>maxnum){secondL=maxnum;maxnum=num})

-Move All Zeros to the End of an array while maintaining the order of other elements.->use two pointer swap technique.

-Remove Duplicates from a sorted array.-> using two pointer and one to keep track of unique index. (first increment the unique index then swap)

-Remove Duplicates from unsorted array.-> using a 'Set' OR HashMap OR by sorting then filtering?? 

-Find the Union and Intersection of two arrays.-> using HashMaps also make sure to handle duplicates using a counter.

-Check if an Array is Sorted in ascending order.-> comparing with two contiguous elements

-Find the Missing Number in an array of numbers from 1 to n.->using set.has(num) or hashmap 
			OR if only one number is missing the we can use summation formula n*(n+1)/2

-Find the Intersection of Two Arrays. -> using hashmap and counter as the value

-Separate Even and Odd Numbers in an array. -> using two pointer for inplace OR two for loops with new arr; 

-Find the Largest Three Elements in an array.-> using set and sort OR by three variables and else if blocks;

-Find the Sum of All Pairs Equal to a Given Sum in an array.-> using hashmap similar to the two sum with some logic updates;

Find the Subarray with the Maximum Sum (Kadane’s Algorithm).
Sort an Array of 0s, 1s, and 2s without using sorting functions.
Merge Two Sorted Arrays without using extra space.
Find the Majority Element in an array (appears more than n/2 times).
Find the Elements that Appear More than n/3 Times in an array.
Count Inversions in an Array.
Find the Kth Largest Element in an array.

String Questions
Check if a String is a Palindrome.
Reverse a String without using built-in functions.
Find the First Non-Repeating Character in a string.
Check if Two Strings are Anagrams of each other.
Count the Number of Vowels and Consonants in a string.
Remove Duplicate Characters in a string.
Implement a Basic String Compression (e.g., "aaabbc" becomes "a3b2c1").
Count the Frequency of Characters in a string.
Check if a String Contains Only Digits.
Find the Longest Common Prefix in an array of strings.
Check if One String is a Rotation of Another (e.g., "waterbottle" and "erbottlewat").
Reverse Each Word in a Sentence.
Find All Substrings of a String.
Find the Longest Palindromic Substring.
Implement the strstr() Function (find the index of a substring within a string).
Check if a String is a Valid Shuffle of two other strings.
Find the Longest Repeating Character Sequence in a string.
Replace Spaces with "%20" in a given string (like URL encoding).
Determine if a String Has All Unique Characters.
Convert a String to an Integer without using parseInt.
Linked List Questions (if you’re ready to work with linked lists in JavaScript)
Implement a Singly Linked List.
Reverse a Linked List.
Find the Middle Element of a linked list.
Check if a Linked List has a Cycle.
Detect the Start of a Cycle in a linked list.
Merge Two Sorted Linked Lists.
Remove Duplicates from an Unsorted Linked List.
Find the Kth Element from the End of a linked list.
Check if a Linked List is a Palindrome.
Split a Linked List into Two Halves.

Miscellaneous Questions
Implement a Stack using an array.
Implement a Queue using an array.
Implement Binary Search for a sorted array.
Sort an Array using Bubble Sort.
Sort an Array using Selection Sort.
Implement Insertion Sort.
Calculate the Factorial of a number using recursion.
Generate Fibonacci Sequence up to n using recursion.
Check if a Number is Prime.
Find All Prime Numbers up to n (Sieve of Eratosthenes).
Calculate the Power of a Number without using the built-in ** operator.
Find the Greatest Common Divisor (GCD) of two numbers.
Find the Least Common Multiple (LCM) of two numbers.
Implement Binary Search on a sorted array.
Count the Number of Set Bits in a binary representation of a number.
Find All Subsets of an Array (Power Set).
Generate All Permutations of a String.
Implement Depth-First Search (DFS) on a graph.
Implement Breadth-First Search (BFS) on a graph.
Solve the Tower of Hanoi Problem using recursion.


